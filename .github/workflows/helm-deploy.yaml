name: Deploy

on:
  workflow_call:
    inputs:
      # Which ArgoCD instance will deploy the Helm chart
      ARGOCD_API_URL:
        required: true
        type: string

      # Which ArgoCD project the application(s) will live under
      ARGOCD_PROJECT:
        required: true
        type: string

      # Determines which K8s cluster the chart will be deployed to
      # ex: 'https://kubernetes.default.svc'
      ARGOCD_DEST_SERVER:
        required: true
        type: string

      # Destination namespace to which the Helm chart is deployed
      ARGOCD_DEST_NAMESPACE:
        required: true
        type: string

      # Values file to use for the chart
      ARGOCD_VALUES_FILE:
        required: false
        type: string
        default: 'values.yaml'

      # Name of the Application object in ArgoCD
      ARGOCD_APP_NAME:
        required: false
        type: string
        default: ''

      # Kind of objects to perform pod restart action on
      ARGOCD_RESTART_ACTION_KIND:
        required: false
        type: string
        default: 'Deployment'

      # Version tag to use when pushing to Production repository. Defaults to 'latest' for dev, GitHub release tag for Prod
      APP_VERSION:
        required: false
        type: string
        default: 'latest'

      # GCP Project containing Artifact Registry repository
      GCP_PROJECT:
        required: false
        type: string

      # Artifact Registry host/region
      ARTIFACT_REGISTRY_HOST:
        required: false
        type: string
        default: us-central1-docker.pkg.dev

      # Artifact Registry repository
      ARTIFACT_REGISTRY_REPO:
        required: false
        type: string
        default: cyderes-helm-repo

jobs:

  set-env:
    name: Set environment
    runs-on: self-hosted
    steps:
    - name: Set environment
      id: set_env
      run: |
        echo ::add-mask::${{ secrets.GCP_ARGO_SERVICE_ACCOUNT_DEV }}
        echo ::add-mask::${{ secrets.GCP_ARGO_SERVICE_ACCOUNT }}
        echo ::add-mask::${{ secrets.ARGOCD_DEV_USERNAME }}
        echo ::add-mask::${{ secrets.ARGOCD_DEV_PASSWORD}}
        echo ::add-mask::${{ secrets.ARGOCD_PROD_USERNAME }}
        echo ::add-mask::${{ secrets.ARGOCD_PROD_PASSWORD }}
        if [[ -n "${{ inputs.GCP_PROJECT }}" ]]; then
          echo ::set-output name=GCP_PROJECT::${{ inputs.GCP_PROJECT }}
          echo ::set-output name=PUSH_FLAG::--no-push
        elif [[ "${{ github.event_name }}" =~ (^release$) ]]; then
          echo ::set-output name=GCP_PROJECT::cyderes-prod
          echo ::set-output name=PUSH_FLAG::
          echo ::set-output name=APP_VERSION_TAG::${{ github.ref_name }}
          echo ::set-output name=GCP_ARGO_SERVICE_ACCOUNT::${{ secrets.GCP_ARGO_SERVICE_ACCOUNT }}
          echo ::set-output name=ARGOCD_USERNAME::${{ secrets.ARGOCD_PROD_USERNAME }}
          echo ::set-output name=ARGOCD_PASSWORD::${{ secrets.ARGOCD_PROD_PASSWORD }}
        elif [[ "${{ github.event_name }}" =~ (^push$) ]]; then
          echo ::set-output name=GCP_PROJECT::cyderes-dev
          echo ::set-output name=PUSH_FLAG::
          echo ::set-output name=APP_VERSION_TAG::latest
          echo ::set-output name=GCP_ARGO_SERVICE_ACCOUNT::${{ secrets.GCP_ARGO_SERVICE_ACCOUNT_DEV }}
          echo ::set-output name=ARGOCD_USERNAME::${{ secrets.ARGOCD_DEV_USERNAME }}
          echo ::set-output name=ARGOCD_PASSWORD::${{ secrets.ARGOCD_DEV_PASSWORD }}
        else
          echo ::set-output name=GCP_PROJECT::cyderes-dev
          echo ::set-output name=PUSH_FLAG::--no-push
          echo ::set-output name=APP_VERSION_TAG::latest
          echo ::set-output name=GCP_ARGO_SERVICE_ACCOUNT::${{ secrets.GCP_ARGO_SERVICE_ACCOUNT_DEV }}
        fi

    outputs:
      GCP_PROJECT: ${{ steps.set_env.outputs.GCP_PROJECT }}
      ARGOCD_USERNAME: ${{ steps.set_env.outputs.ARGOCD_USERNAME }}
      ARGOCD_PASSWORD: ${{ steps.set_env.outputs.ARGOCD_PASSWORD }}

  get-chart-properties:
    name: Get Helm chart properties
    runs-on: self-hosted
    steps:

    - uses: actions/checkout@master
      name: Checkout ${{ github.ref_name }} branch
      with:
        fetch-depth: 0
        ref: ${{ github.ref_name }}

    - name: Get Helm chart name/version
      id: get-chart-properties
      run: |
        echo "::set-output name=CHART_NAME::$(cat $(find charts | grep Chart.yaml) | grep -E '^name:' | awk '{print $2}' | tr -d '\n\r')"
        echo "::set-output name=CHART_VERSION::$(cat $(find charts | grep Chart.yaml) | grep -E '^version:' | awk '{print $2}' | tr -d '\n\r')"
        if [[ -n "${{ inputs.ARGOCD_APP_NAME }}" ]]; then
          echo echo ::set-output name=ARGOCD_APP_NAME::${{ inputs.ARGOCD_APP_NAME }}
        else
          echo echo ::set-output name=ARGOCD_APP_NAME::$(cat $(find charts | grep Chart.yaml) | grep -E '^name:' | awk '{print $2}' | tr -d '\n\r')
        fi

    outputs:
      chart_name: ${{ steps.get-chart-properties.outputs.CHART_NAME }}
      chart_version: ${{ steps.get-chart-properties.outputs.CHART_VERSION }}
      app_name: ${{ steps.get-chart-properties.outputs.ARGOCD_APP_NAME }}

  deploy-argo-app:
    name: Create/update app in ArgoCD
    needs:
      - get-chart-properties
      - set-env
    runs-on: self-hosted
    steps:
      - name: Set environment
        id: set_env
        run: |
          echo ::add-mask::${{ secrets.GCP_ARGO_SERVICE_ACCOUNT_DEV }}
          echo ::add-mask::${{ secrets.GCP_ARGO_SERVICE_ACCOUNT }}
          echo ::add-mask::${{ secrets.ARGOCD_DEV_USERNAME }}
          echo ::add-mask::${{ secrets.ARGOCD_DEV_PASSWORD}}
          echo ::add-mask::${{ secrets.ARGOCD_PROD_USERNAME }}
          echo ::add-mask::${{ secrets.ARGOCD_PROD_PASSWORD }}
          if [[ -n "${{ inputs.GCP_PROJECT }}" ]]; then
            echo ::set-output name=GCP_PROJECT::${{ inputs.GCP_PROJECT }}
            echo ::set-output name=PUSH_FLAG::--no-push
          elif [[ "${{ github.event_name }}" =~ (^release$) ]]; then
            echo ::set-output name=GCP_PROJECT::cyderes-prod
            echo ::set-output name=PUSH_FLAG::
            echo ::set-output name=APP_VERSION_TAG::${{ github.ref_name }}
            echo ::set-output name=GCP_ARGO_SERVICE_ACCOUNT::${{ secrets.GCP_ARGO_SERVICE_ACCOUNT }}
            echo ::set-output name=ARGOCD_USERNAME::${{ secrets.ARGOCD_PROD_USERNAME }}
            echo ::set-output name=ARGOCD_PASSWORD::${{ secrets.ARGOCD_PROD_PASSWORD }}
          elif [[ "${{ github.event_name }}" =~ (^push$) ]]; then
            echo ::set-output name=GCP_PROJECT::cyderes-dev
            echo ::set-output name=PUSH_FLAG::
            echo ::set-output name=APP_VERSION_TAG::latest
            echo ::set-output name=GCP_ARGO_SERVICE_ACCOUNT::${{ secrets.GCP_ARGO_SERVICE_ACCOUNT_DEV }}
            echo ::set-output name=ARGOCD_USERNAME::${{ secrets.ARGOCD_DEV_USERNAME }}
            echo ::set-output name=ARGOCD_PASSWORD::${{ secrets.ARGOCD_DEV_PASSWORD }}
          else
            echo ::set-output name=GCP_PROJECT::cyderes-dev
            echo ::set-output name=PUSH_FLAG::--no-push
            echo ::set-output name=APP_VERSION_TAG::latest
            echo ::set-output name=GCP_ARGO_SERVICE_ACCOUNT::${{ secrets.GCP_ARGO_SERVICE_ACCOUNT_DEV }}
          fi
      - uses: actions/checkout@master
      - name: ArgoCD login
        uses: clowdhaus/argo-cd-action@v1.9.0
        with:
          command: login ${{ inputs.ARGOCD_API_URL }}
          options: >
            --username ${{ steps.set_env.outputs.ARGOCD_USERNAME }}
            --password ${{ steps.set_env.outputs.ARGOCD_PASSWORD }}

      - name: Create ArgoCD Application
        uses: clowdhaus/argo-cd-action@v1.9.0
        with:
          command: app create ${{ needs.get-chart-properties.outputs.app_name }}
          options: >
            --project ${{ inputs.ARGOCD_PROJECT }}
            --server ${{ inputs.ARGOCD_API_URL }}
            --dest-server ${{ inputs.ARGOCD_DEST_SERVER }}
            --dest-namespace ${{ inputs.ARGOCD_DEST_NAMESPACE }}
            --repo ${{ inputs.ARTIFACT_REGISTRY_HOST }}/${{ steps.set_env.outputs.GCP_PROJECT }}/${{ inputs.ARTIFACT_REGISTRY_REPO }}
            --revision ${{ needs.get-chart-properties.outputs.chart_version }}
            --helm-chart ${{ needs.get-chart-properties.outputs.chart_name }}
            --values ${{ inputs.ARGOCD_VALUES_FILE }}
            --sync-option Prune=true
            --sync-option CreateNamespace=true
            --sync-option RespectIgnoreDifferences=true
            --upsert

      - name: Patch ArgoCD Application for ESO
        uses: clowdhaus/argo-cd-action@v1.9.0
        with:
          command: app patch ${{ needs.get-chart-properties.outputs.app_name }}
          options: >
            --patch '{"spec":{"ignoreDifferences":[{"kind":"Secret","jsonPointers":["/metadata/labels","/data"],"jqPathExpressions":[".metadata.labels | select(.externalSecretsManaged != null)"]}]}}'
            --type merge

      - name: Refresh ArgoCD Application
        uses: clowdhaus/argo-cd-action@v1.9.0
        with:
          command: app get ${{ needs.get-chart-properties.outputs.app_name }} --hard-refresh

      - name: ArgoCD sync
        uses: clowdhaus/argo-cd-action@v1.9.0
        with:
          command: app sync ${{ needs.get-chart-properties.outputs.app_name }} --prune

      - name: ArgoCD deployment restart
        uses: clowdhaus/argo-cd-action@v1.9.0
        with:
          command: app actions run ${{ needs.get-chart-properties.outputs.app_name }} restart --group apps --kind ${{ inputs.ARGOCD_RESTART_ACTION_KIND }}