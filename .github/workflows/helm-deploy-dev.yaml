name: Deploy to Development

on:
  workflow_call:
    inputs:
      # Which ArgoCD instance will deploy the Helm chart
      ARGOCD_API_URL:
        required: true
        type: string

      # Which ArgoCD project the application(s) will live under
      ARGOCD_PROJECT:
        required: true
        type: string

      # Determines which K8s cluster the chart will be deployed to
      # ex: 'https://kubernetes.default.svc'
      ARGOCD_DEST_SERVER:
        required: true
        type: string

      # Destination namespace to which the Helm chart is deployed
      ARGOCD_DEST_NAMESPACE:
        required: true
        type: string

      # Values file to use for the chart
      ARGOCD_VALUES_FILE:
        required: false
        type: string
        default: 'values.yaml'

      # appVersion used to package the chart. Defaults to 'latest' for dev, GitHub release tag for Prod
      APP_VERSION:
        required: false
        type: string
        default: 'latest'

  # GCP Artifact Repository URL used by ArgoCD, which requires that the prefix be omitted
      GCP_ARTIFACT_REGISTRY:
        required: false
        type: string
        default: 'oci://us-central1-docker.pkg.dev/cyderes-dev/cyderes-helm-repo'

  # Same thing, but without 'oci://'' prefix
      ARGOCD_REPO:
        required: false
        type: string
        default: 'us-central1-docker.pkg.dev/cyderes-dev/cyderes-helm-repo'

    secrets:
      # Credentials to use for ArgoCD instance. Should be secrets available to calling workflow project.
      ARGOCD_USERNAME:
        required: true
      ARGOCD_PASSWORD:
        required: true
      GCP_ARGO_SERVICE_ACCOUNT:
        required: true

jobs:
  get-chart-properties:
    name: Get Helm chart properties
    runs-on: self-hosted
    steps:
    - uses: actions/checkout@master
      name: Checkout main branch
      with:
        fetch-depth: 0
    - name: Get Helm chart name/version
      id: get-chart-properties
      run: |
        echo "::set-output name=CHART_NAME::$(cat $(find charts | grep Chart.yaml) | grep -E '^name:' | awk '{print $2}' | tr -d '\n\r')"
        echo "::set-output name=CHART_VERSION::$(cat $(find charts | grep Chart.yaml) | grep -E '^version:' | awk '{print $2}' | tr -d '\n\r')"
    outputs:
      chart_name: ${{ steps.get-chart-properties.outputs.CHART_NAME }}
      chart_version: ${{ steps.get-chart-properties.outputs.CHART_VERSION }}
  create-app:
    name: Create/update app in ArgoCD Dev
    needs:
      - get-chart-properties
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@master
      - name: ArgoCD login
        uses: clowdhaus/argo-cd-action@v1.9.0
        with:
          command: login ${{ inputs.ARGOCD_API_URL }}
          options: |
            --username ${{ secrets.ARGOCD_USERNAME }} --password ${{ secrets.ARGOCD_PASSWORD }}
      - name: Create ArgoCD Application
        uses: clowdhaus/argo-cd-action@v1.9.0
        with:
          command: app create ${{ needs.get-chart-properties.outputs.chart_name }}
          options: --project ${{ inputs.ARGOCD_PROJECT }} --server ${{ inputs.ARGOCD_API_URL }} --dest-server ${{ inputs.ARGOCD_DEST_SERVER }} --dest-namespace ${{ inputs.ARGOCD_DEST_NAMESPACE }} --repo ${{ inputs.ARGOCD_REPO }} --revision ${{ needs.get-chart-properties.outputs.chart_version }} --helm-chart ${{ needs.get-chart-properties.outputs.chart_name }} --values ${{ inputs.ARGOCD_VALUES_FILE }} --sync-option Prune=true --sync-option CreateNamespace=true --sync-option RespectIgnoreDifferences=true --upsert
      - name: Patch ArgoCD Application for ESO
        uses: clowdhaus/argo-cd-action@v1.9.0
        with:
          command: app patch ${{ needs.get-chart-properties.outputs.chart_name }}
          options: --patch '{"spec":{"ignoreDifferences":[{"kind":"Secret","jsonPointers":["/metadata/labels","/data"],"jqPathExpressions":[".metadata.labels | select(.externalSecretsManaged != null)"]}]}}' --type merge
  sync-app-dev:
    name: Sync application in ArgoCD Dev
    needs:
      - get-chart-properties
      - create-app
    runs-on: self-hosted
    steps:
      - name: ArgoCD login
        uses: clowdhaus/argo-cd-action@v1.9.0
        with:
          command: login ${{ inputs.ARGOCD_API_URL }}
          options: |
            --username ${{ secrets.ARGOCD_USERNAME }} --password ${{ secrets.ARGOCD_PASSWORD }}
      - name: ArgoCD sync
        uses: clowdhaus/argo-cd-action@v1.9.0
        with:
          command: app sync ${{ needs.get-chart-properties.outputs.chart_name }} --prune