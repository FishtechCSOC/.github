name: GoReleaser Build

on:
  workflow_call:
    inputs:

      # GCP Project containing Artifact Registry repository
      GCP_PROJECT:
        required: false
        type: string

      # Artifact Registry host/region
      ARTIFACT_REGISTRY_HOST:
        required: false
        type: string
        default: us-central1-docker.pkg.dev

      # Artifact Registry repository
      ARTIFACT_REGISTRY_REPO:
        required: false
        type: string
        default: cyderes-container-repo

      # Version tag to use when pushing to Production repository
      APP_VERSION:
        required: false
        type: string
        default: latest

jobs:
  build:
    runs-on: self-hosted
    name: Build
    steps:
      - name: checkout git
        uses: actions/checkout@v3

      - name: Set environment
        id: set_env
        run: |
          echo ::add-mask::${{ secrets.GCP_ARGO_SERVICE_ACCOUNT_DEV }}
          echo ::add-mask::${{ secrets.GCP_ARGO_SERVICE_ACCOUNT }}
          if [[ -n "${{ inputs.GCP_PROJECT }}" ]]; then
            echo ::set-output name=GCP_PROJECT::${{ inputs.GCP_PROJECT }}
            echo ::set-output name=PUSH_FLAG::--no-push
          elif [[ "${{ github.event_name }}" =~ (^release$) ]]; then
            echo ::set-output name=GCP_PROJECT::cyderes-prod
            echo ::set-output name=PUSH_FLAG::
            echo ::set-output name=APP_VERSION_TAG::${{ github.ref_name }}
            echo ::set-output name=GCP_ARGO_SERVICE_ACCOUNT::${{ secrets.GCP_ARGO_SERVICE_ACCOUNT }}
          elif [[ "${{ github.event_name }}" =~ (^push$) ]]; then
            echo ::set-output name=GCP_PROJECT::cyderes-dev
            echo ::set-output name=PUSH_FLAG::
            echo ::set-output name=APP_VERSION_TAG::latest
            echo ::set-output name=GCP_ARGO_SERVICE_ACCOUNT::${{ secrets.GCP_ARGO_SERVICE_ACCOUNT_DEV }}
          else
            echo ::set-output name=GCP_PROJECT::cyderes-dev
            echo ::set-output name=PUSH_FLAG::--no-push
            echo ::set-output name=APP_VERSION_TAG::latest
            echo ::set-output name=GCP_ARGO_SERVICE_ACCOUNT::${{ secrets.GCP_ARGO_SERVICE_ACCOUNT_DEV }}
          fi

      - name: Docker login
        uses: 'docker/login-action@v1'
        if: ${{ github.event_name != 'release' }}
        with:
          registry: ${{ inputs.ARTIFACT_REGISTRY_HOST }}
          username: _json_key_base64
          password: ${{ steps.set_env.outputs.GCP_ARGO_SERVICE_ACCOUNT }}

      - uses: actions/setup-go@v3
        with:
          go-version: '^1.13.1'

      - name: Get Go version
        id: go_version
        run: echo ::set-output name=GO_VERSION::$(go version | awk '{print $3}')

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v3
        with:
          distribution: goreleaser
          version: latest
          args: release --snapshot --rm-dist --skip-sign --debug
        env:
          GITHUB_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
          GOVERSION: ${{ steps.go_version.outputs.GO_VERSION }}
          REGISTRY: ${{ inputs.ARTIFACT_REGISTRY_HOST }}/${{ steps.set_env.outputs.GCP_PROJECT }}/${{ inputs.ARTIFACT_REGISTRY_REPO }}

      - name: Docker push
        if: ${{ github.event_name == 'push' || github.event_name == 'release' }}
        run: |
          PROJECT_NAME=$(cat .goreleaser.yml | grep project_name | awk '{print $2}')
          SOURCE_IMAGE=$(docker image ls | grep $PROJECT_NAME | grep ${{ inputs.APP_VERSION }} | awk '{print $1}')
          TARGET_IMAGE="${{ inputs.ARTIFACT_REGISTRY_HOST }}/${{ steps.set_env.outputs.GCP_PROJECT }}/${{ inputs.ARTIFACT_REGISTRY_REPO }}/${PROJECT_NAME}:${{ inputs.APP_VERSION }}"
          docker image tag ${SOURCE_IMAGE} ${TARGET_IMAGE}
          docker push ${TARGET_IMAGE}