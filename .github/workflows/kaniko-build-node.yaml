name: Kaniko Build

on:
  workflow_call:
    inputs:
      # Image name to be built (e.g. my-app-name/container-image-name)
      IMAGE:
        required: true
        type: string
        default: 'latest'

      # Path to Dockerfile (e.g. path/to/Dockerfile)
      DOCKERFILE_PATH:
        required: false
        type: string
        default: 'Dockerfile'

      # Path to Docker context
      CONTEXT_PATH:
        required: false
        type: string
        default: '.'

      # GCP Project containing Artifact Registry repository
      GCP_PROJECT:
        required: false
        type: string

      # Artifact Registry host/region
      ARTIFACT_REGISTRY_HOST:
        required: false
        type: string
        default: us-central1-docker.pkg.dev

      # Artifact Registry repository
      ARTIFACT_REGISTRY_REPO:
        required: false
        type: string
        default: cyderes-container-repo

      NPM_TEST:
        required: false
        type: boolean
        default: true

      NPM_LINT:
        required: false
        type: boolean
        default: true

jobs:

  check-code-diffs:
    name: Check for code changes
    runs-on: self-hosted
    steps:

    - uses: actions/checkout@master
      name: Checkout current branch
      with:
        fetch-depth: 0

    - name: Check for code diffs
      id: code-changes
      run: |
        if [[ -n "$(git --no-pager diff --name-only origin/${GITHUB_BASE_REF} -- ${{ inputs.CONTEXT_PATH }}/$(dirname ${{ inputs.DOCKERFILE_PATH }}) | tr -d '\n\r')" ]]; then
          echo "diff detected, proceeding with code build"
          echo "::set-output name=CODE_CHANGES::true"
        else
          echo "no diff, skipping code build"
        fi

    outputs:
      code_changes: ${{ steps.chart-changes.outputs.CODE_CHANGES }}

  build:
    runs-on: self-hosted
    name: Build
    needs:
      - check-code-diffs
    if: |
      always() &&
      contains(needs.check-code-diffs.outputs.code_changes, 'true')
    steps:
      - name: checkout git
        uses: actions/checkout@v3
      - name: Set environment
        id: set_env
        run: |
          echo ::add-mask::${{ secrets.GCP_ARGO_SERVICE_ACCOUNT_DEV }}
          echo ::add-mask::${{ secrets.GCP_ARGO_SERVICE_ACCOUNT }}
          if [[ -n "${{ inputs.GCP_PROJECT }}" ]]; then
            echo ::set-output name=GCP_PROJECT::${{ inputs.GCP_PROJECT }}
            echo ::set-output name=PUSH_FLAG::--no-push
          elif [[ "${{ github.event_name }}" =~ (^release$) ]]; then
            echo ::set-output name=GCP_PROJECT::cyderes-prod
            echo ::set-output name=PUSH_FLAG::
            echo ::set-output name=APP_VERSION_TAG::${{ github.ref_name }}
            echo ::set-output name=GCP_ARGO_SERVICE_ACCOUNT::${{ secrets.GCP_ARGO_SERVICE_ACCOUNT }}
          elif [[ "${{ github.event_name }}" =~ (^push$) ]]; then
            echo ::set-output name=GCP_PROJECT::cyderes-dev
            echo ::set-output name=PUSH_FLAG::
            echo ::set-output name=APP_VERSION_TAG::latest
            echo ::set-output name=GCP_ARGO_SERVICE_ACCOUNT::${{ secrets.GCP_ARGO_SERVICE_ACCOUNT_DEV }}
          else
            echo ::set-output name=GCP_PROJECT::cyderes-dev
            echo ::set-output name=PUSH_FLAG::--no-push
            echo ::set-output name=APP_VERSION_TAG::latest
            echo ::set-output name=GCP_ARGO_SERVICE_ACCOUNT::${{ secrets.GCP_ARGO_SERVICE_ACCOUNT_DEV }}
          fi
      - name: Read .nvmrc
        id: node_version
        run: echo ::set-output name=NODE_VERSION::$(cat ${{ inputs.CONTEXT_PATH }}/.nvmrc)

      - name: Set up node
        uses: actions/setup-node@v3.1.1
        with:
          node-version: ${{ steps.node_version.outputs.NODE_VERSION }}
          registry-url: 'https://npm.pkg.github.com'

      - name: npm install
        run: cd ${{ inputs.CONTEXT_PATH }}; npm ci
        env:
          NODE_AUTH_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}

      - name: npm test
        if: ${{ github.event_name == 'pull_request' && inputs.NPM_TEST }}
        run: cd ${{ inputs.CONTEXT_PATH }}; npm test

      - name: npm lint
        if: ${{ github.event_name == 'pull_request' && inputs.NPM_LINT }}
        run: cd ${{ inputs.CONTEXT_PATH }}; npm run lint

      - name: Kaniko build
        uses: aevea/action-kaniko@v0.9.0
        with:
          image: ${{ inputs.IMAGE }}
          registry: ${{ inputs.ARTIFACT_REGISTRY_HOST }}/${{ steps.set_env.outputs.GCP_PROJECT }}/${{ inputs.ARTIFACT_REGISTRY_REPO }}
          username: "_json_key_base64"
          password: ${{ steps.set_env.outputs.GCP_ARGO_SERVICE_ACCOUNT }}
          path: ${{ inputs.CONTEXT_PATH }}
          build_file: ${{ inputs.DOCKERFILE_PATH }}
          extra_args: --build-arg=GITHUB_ACCESS_TOKEN=${{ secrets.CI_GITHUB_TOKEN }} ${{ steps.set_env.outputs.PUSH_FLAG }}
          cache: true
          cache_registry: ${{ inputs.ARTIFACT_REGISTRY_HOST }}/${{ steps.set_env.outputs.GCP_PROJECT }}/${{ inputs.ARTIFACT_REGISTRY_REPO }}/${{ inputs.IMAGE }}/cache
          tag: ${{ steps.set_env.outputs.APP_VERSION_TAG }}
          tag_with_latest: true